swagger: '2.0'
info:
  description: Mancala Api
  version: '1.0'
  title: Mancala Api
host: localhost:8080
basePath: /
tags:
  - name: board-controller
    description: Board Controller
  - name: match-controller
    description: Match Controller
  - name: player-controller
    description: Player Controller
paths:
  /api/board/{matchId}:
    get:
      tags:
        - board-controller
      summary: get
      operationId: getUsingGET
      produces:
        - '*/*'
      parameters:
        - name: matchId
          in: path
          description: matchId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Board'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ApiError'
  /api/board/{matchId}/sows:
    put:
      tags:
        - board-controller
      summary: sows
      operationId: sowsUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: matchId
          in: path
          description: matchId
          required: true
          type: integer
          format: int64
        - in: body
          name: move
          description: move
          required: true
          schema:
            $ref: '#/definitions/Move'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Board'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ApiError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ApiError'
  /api/match/start/{playerId}:
    post:
      tags:
        - match-controller
      summary: create
      operationId: createUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: playerId
          in: path
          description: playerId
          required: true
          type: integer
          format: int64
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Match'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ApiError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ApiError'
  /api/match/{matchId}/join/{playerId}:
    put:
      tags:
        - match-controller
      summary: join
      operationId: joinUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: matchId
          in: path
          description: matchId
          required: true
          type: integer
          format: int64
        - name: playerId
          in: path
          description: playerId
          required: true
          type: integer
          format: int64
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Match'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ApiError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ApiError'
  /api/player:
    post:
      tags:
        - player-controller
      summary: create
      operationId: createUsingPOST_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: player
          description: player
          required: true
          schema:
            $ref: '#/definitions/Player'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Player'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ApiError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ApiError'
  /api/player/{id}:
    get:
      tags:
        - player-controller
      summary: get
      operationId: getUsingGET_1
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Player'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ApiError'
definitions:
  ApiError:
    type: object
    properties:
      status:
        type: integer
      error:
        type: string
  Board:
    type: object
    properties:
      draw:
        type: boolean
      matchId:
        type: integer
        format: int64
      pits:
        type: array
        items:
          $ref: '#/definitions/Pit'
      players:
        type: array
        items:
          $ref: '#/definitions/Player'
      status:
        type: string
        enum:
          - ABANDONED
          - COMPLETED
          - IN_PROGRESS
          - WAITING_PLAYERS
          - WAITING_SECOND_PLAYER
      turnPlayerId:
        type: integer
        format: int64
      winnerId:
        type: integer
        format: int64
    title: Board
  Match:
    type: object
    properties:
      draw:
        type: boolean
      endedAt:
        type: string
        format: date-time
      id:
        type: integer
        format: int64
      pits:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Pit'
      players:
        type: array
        uniqueItems: true
        items:
          $ref: '#/definitions/Player'
      startedAt:
        type: string
        format: date-time
      status:
        type: string
        enum:
          - ABANDONED
          - COMPLETED
          - IN_PROGRESS
          - WAITING_PLAYERS
          - WAITING_SECOND_PLAYER
      turnPlayerId:
        type: integer
        format: int64
      winnerPlayerId:
        type: integer
        format: int64
    title: Match
  Move:
    type: object
    properties:
      playerId:
        type: integer
        format: int64
      positionPitSelected:
        type: string
        format: byte
    title: Move
  Pit:
    type: object
    properties:
      empty:
        type: boolean
      id:
        type: integer
        format: int64
      match:
        $ref: '#/definitions/Match'
      player:
        $ref: '#/definitions/Player'
      position:
        type: string
        format: byte
      stonesCount:
        type: string
        format: byte
      type:
        type: string
        enum:
          - LARGE
          - NORMAL
    title: Pit
  Player:
    type: object
    properties:
      createdAt:
        type: string
        format: date-time
      id:
        type: integer
        format: int64
      name:
        type: string
      username:
        type: string
    title: Player